package pkg

import java.lang.annotation.Annotation
import java.util.ArrayList
import java.util.Arrays
import java.util.List
import java.util.OptionalInt
import java.util.function.IntBinaryOperator
import java.util.function.Supplier

open class TestClassLambda {
   var field: int = 0

   open fun testLambda() {
      List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);// 29
      int b = (int)Math.random();// 30
      list.forEach(n -> {// 32
         int a = 2 * n;// 33
         System.out.println(a + b + this.field);// 34
      });// 35
   }// 36

   open fun testLambda1() {
      int a = (int)Math.random();// 39
      Runnable r1 = () -> {// 40
         System.out.println("hello1" + a);
      };
      Runnable r2 = () -> {// 41
         System.out.println("hello2" + a);
      };
   }// 42

   open fun testLambda2() {
      reduce((left, right) -> {// 45
         return Math.max(left, right);
      });
   }// 46

   open fun testLambda3() {
      reduce(Math::max);// 49
   }// 50

   open fun testLambda4() {
      reduce(TestClassLambda::localMax);// 53
   }// 54

   open fun testLambda5() {
      String x = "abcd";// 57
      function(x::toString);// 58
   }// 59

   open fun testLambda6() {
      List<String> list = new ArrayList();// 62
      int bottom = list.size() * 2;// 63
      int top = list.size() * 5;// 64
      list.removeIf(s -> {// 65
         return bottom >= s.length() && s.length() <= top;
      });
   }// 66

   open fun testLambda7(annotations: Annotation[]) {
      Arrays.stream(annotations).map(Annotation::annotationType);// 69
   }// 70

   open fun reduce(op: IntBinaryOperator): OptionalInt {
      return null;// 73
   }

   open fun function(supplier: Supplier<String>): String {
      return (String)supplier.get();// 77
   }

   open fun localMax(first: int, second: int): int {
      return 0;// 81
   }

   open fun nestedLambdas() {
      int a = 5;// 85
      Runnable r1 = () -> {// 86
         Runnable r2 = () -> {// 87
            System.out.println("hello2" + a);
         };
         System.out.println("hello1" + a);// 88
      };// 89
   }// 90
}

class 'pkg/TestClassLambda' {
   method 'lambda$testLambda$0 (ILjava/lang/Integer;)V' {
      0      17
      1      17
      2      17
      3      17
      4      17
      5      17
      6      17
      7      18
      8      18
      9      18
      a      18
      b      18
      c      18
      d      18
      e      18
      f      18
      10      18
      11      18
      12      18
      13      18
      14      18
      15      19
   }

   method 'testLambda ()V' {
      7      14
      8      14
      9      14
      a      14
      e      14
      f      14
      10      14
      11      14
      15      14
      16      14
      17      14
      18      14
      1c      14
      1d      14
      1e      14
      1f      14
      23      14
      24      14
      25      14
      26      14
      2a      14
      2b      14
      2c      14
      2d      14
      2e      14
      33      14
      34      14
      35      14
      36      14
      37      14
      39      14
      3a      14
      3b      14
      3c      14
      3d      15
      3e      15
      3f      15
      40      15
      41      15
      42      16
      4a      16
      4b      16
      4c      16
      4d      16
      4e      16
      4f      20
   }

   method 'lambda$testLambda1$1 (I)V' {
      0      25
      1      25
      2      25
      a      25
      b      25
      f      25
      13      25
      14      25
      15      25
      16      25
      17      25
      18      25
      19      26
   }

   method 'lambda$testLambda1$2 (I)V' {
      0      28
      1      28
      2      28
      a      28
      b      28
      f      28
      13      28
      14      28
      15      28
      16      28
      17      28
      18      28
      19      29
   }

   method 'testLambda1 ()V' {
      0      23
      1      23
      2      23
      3      23
      4      23
      b      24
      12      27
      13      30
   }

   method 'lambda$testLambda2$3 (II)I' {
      0      34
      1      34
      2      34
      3      34
      4      34
      5      34
   }

   method 'testLambda2 ()V' {
      5      33
      6      33
      7      33
      9      36
   }

   method 'testLambda3 ()V' {
      5      39
      6      39
      7      39
      9      40
   }

   method 'testLambda4 ()V' {
      5      43
      6      43
      7      43
      9      44
   }

   method 'testLambda5 ()V' {
      0      47
      1      47
      2      47
      e      48
      f      48
      10      48
      12      49
   }

   method 'lambda$testLambda6$4 (IILjava/lang/String;)Z' {
      0      56
      1      56
      2      56
      3      56
      4      56
      5      56
      8      56
      9      56
      a      56
      b      56
      c      56
      d      56
      15      56
   }

   method 'testLambda6 ()V' {
      7      52
      8      53
      9      53
      a      53
      b      53
      c      53
      d      53
      e      53
      f      53
      10      53
      11      54
      12      54
      13      54
      14      54
      15      54
      16      54
      17      54
      18      54
      19      54
      1a      55
      22      55
      23      55
      24      55
      25      55
      26      55
      28      58
   }

   method 'testLambda7 ([Ljava/lang/annotation/Annotation;)V' {
      0      61
      1      61
      2      61
      3      61
      9      61
      a      61
      b      61
      c      61
      d      61
      f      62
   }

   method 'reduce (Ljava/util/function/IntBinaryOperator;)Ljava/util/OptionalInt;' {
      0      65
      1      65
   }

   method 'function (Ljava/util/function/Supplier;)Ljava/lang/String;' {
      0      69
      1      69
      2      69
      3      69
      4      69
      5      69
      6      69
      7      69
      8      69
      9      69
   }

   method 'localMax (II)I' {
      0      73
      1      73
   }

   method 'lambda$null$5 (I)V' {
      0      80
      1      80
      2      80
      a      80
      b      80
      f      80
      13      80
      14      80
      15      80
      16      80
      17      80
      18      80
      19      81
   }

   method 'lambda$nestedLambdas$6 (I)V' {
      6      79
      7      82
      8      82
      9      82
      11      82
      12      82
      16      82
      1a      82
      1b      82
      1c      82
      1d      82
      1e      82
      1f      82
      20      83
   }

   method 'nestedLambdas ()V' {
      0      77
      1      77
      8      78
      9      84
   }
}

Lines mapping:
29 <-> 15
30 <-> 16
32 <-> 17
33 <-> 18
34 <-> 19
35 <-> 20
36 <-> 21
39 <-> 24
40 <-> 25
41 <-> 28
42 <-> 31
45 <-> 34
46 <-> 37
49 <-> 40
50 <-> 41
53 <-> 44
54 <-> 45
57 <-> 48
58 <-> 49
59 <-> 50
62 <-> 53
63 <-> 54
64 <-> 55
65 <-> 56
66 <-> 59
69 <-> 62
70 <-> 63
73 <-> 66
77 <-> 70
81 <-> 74
85 <-> 78
86 <-> 79
87 <-> 80
88 <-> 83
89 <-> 84
90 <-> 85
