package pkg

import java.util.List
import java.util.Random

open class TestIfLoop {
   open fun testCompoundCondition(i: int, j: int): int {
      while(i > 0 && j < 3) {// 8
         if (j < 0) {// 9
            --j;// 10
            if (i > 3 && j == -2) {// 12 13
               j = 1;// 14
            }
         }

         if (i > 10) {// 19
            return i - 1;// 20 21
         }
      }

      return 3;// 25
   }

   open fun testCollection(list: List<Object>): Object {
      while(!list.isEmpty()) {// 29
         if (list.size() <= 3) {// 30
            return list.remove(0);// 33
         }

         list.remove(3);// 31
      }

      return null;// 37
   }

   open fun testCompound2(a: int, b: int, random: Random) {
      a = random.nextInt(8) - random.nextInt(8) + a;// 41

      for(int var5 = random.nextInt(8) - random.nextInt(8) + b; a >= 0 && a <= 20 && var5 >= 0 && var5 <= 20; var5 -= random.nextInt(4) - random.nextInt(4)) {// 42 44 46
         a -= random.nextInt(4) - random.nextInt(4);// 45
      }

   }// 48

   open fun testElseIf(i: int): int {
      while(i > 0) {// 51
         if (i == 10) {// 52
            ++i;// 53
         } else if (i == 11) {// 54
            i += 2;// 55
         } else if (i == 12) {// 56
            --i;// 57
         } else if (i == 13) {// 58
            i /= 2;// 59
         } else {
            if (i != 14) {// 60
               throw new RuntimeException();// 63
            }

            i -= 4;// 61
         }
      }

      return 2;// 67
   }
}

class 'pkg/TestIfLoop' {
   method 'testCompoundCondition (II)I' {
      0      7
      1      7
      4      7
      5      7
      6      7
      9      8
      a      8
      d      9
      e      9
      f      9
      10      10
      11      10
      12      10
      15      10
      16      10
      17      10
      18      10
      1b      11
      1c      11
      1d      15
      1e      15
      1f      15
      20      15
      23      16
      24      16
      25      16
      27      16
      28      20
      29      20
   }

   method 'testCollection (Ljava/util/List;)Ljava/lang/Object;' {
      0      24
      1      24
      2      24
      3      24
      4      24
      5      24
      6      24
      9      25
      a      25
      b      25
      c      25
      d      25
      e      25
      f      25
      10      25
      13      29
      14      29
      15      29
      16      29
      17      29
      18      29
      19      29
      1e      26
      1f      26
      20      26
      21      26
      22      26
      23      26
      24      26
      25      26
      26      32
      27      32
   }

   method 'testCompound2 (IILjava/util/Random;)V' {
      0      36
      1      36
      2      36
      3      36
      4      36
      5      36
      6      36
      7      36
      8      36
      9      36
      a      36
      b      36
      c      36
      d      36
      e      36
      f      36
      10      38
      11      38
      12      38
      13      38
      14      38
      15      38
      16      38
      17      38
      18      38
      19      38
      1a      38
      1b      38
      1c      38
      1d      38
      1e      38
      1f      38
      20      38
      21      38
      24      38
      25      38
      26      38
      27      38
      2a      38
      2b      38
      2e      38
      2f      38
      30      38
      31      38
      35      39
      36      39
      37      39
      38      39
      39      39
      3a      39
      3b      39
      3c      39
      3d      39
      3e      39
      3f      39
      41      39
      43      38
      44      38
      45      38
      46      38
      47      38
      48      38
      49      38
      4a      38
      4b      38
      4c      38
      4d      38
      4f      38
      53      42
   }

   method 'testElseIf (I)I' {
      0      45
      1      45
      4      46
      5      46
      6      46
      7      46
      a      47
      b      47
      c      47
      10      48
      11      48
      12      48
      13      48
      16      49
      17      49
      18      49
      1c      50
      1d      50
      1e      50
      1f      50
      22      51
      23      51
      24      51
      28      52
      29      52
      2a      52
      2b      52
      2f      53
      31      53
      35      55
      36      55
      37      55
      38      55
      3b      59
      3c      59
      3d      59
      48      56
      49      63
      4a      63
   }
}

Lines mapping:
8 <-> 8
9 <-> 9
10 <-> 10
12 <-> 11
13 <-> 11
14 <-> 12
19 <-> 16
20 <-> 17
21 <-> 17
25 <-> 21
29 <-> 25
30 <-> 26
31 <-> 30
33 <-> 27
37 <-> 33
41 <-> 37
42 <-> 39
44 <-> 39
45 <-> 40
46 <-> 39
48 <-> 43
51 <-> 46
52 <-> 47
53 <-> 48
54 <-> 49
55 <-> 50
56 <-> 51
57 <-> 52
58 <-> 53
59 <-> 54
60 <-> 56
61 <-> 60
63 <-> 57
67 <-> 64
