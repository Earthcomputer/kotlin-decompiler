package pkg

abstract annotation class MoreAnnotations {
   @MoreAnnotations(
      intValue = 1,
      byteValue = 1,
      floatValue = 1.0F,
      doubleValue = 1.0,
      booleanValue = true,
      shortValue = 1,
      longValue = 1L,
      charValue = '\n',
      enumValue = MoreAnnotations.TestEnum.FirstValue,
      annotationValue = @MoreAnnotations.NestedAnnotation("a"),
      stringValue = "",
      classValue = String.class
   )
   val annotatedWithValues: String = ""
   @MoreAnnotations(
      intArray = {},
      byteArray = {},
      floatArray = {},
      doubleArray = {},
      booleanArray = {},
      shortArray = {},
      longArray = {},
      charArray = {},
      enumArray = {},
      annotationArray = {},
      stringArray = {},
      classArray = {}
   )
   val annotatedWithEmptyArrays: String = ""
   @MoreAnnotations(
      intArray = {1, 0, 2147483647, -2147483648},
      byteArray = {1, 0, 127, -128, -1},
      floatArray = {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F},
      doubleArray = {1.0, 0.0, 1.7976931348623157E308, 4.9E-324, 0.0 / 0.0, 1.0 / 0.0, -1.0 / 0.0},
      booleanArray = {true, false},
      shortArray = {1, 0, 32767, -32768, -1},
      longArray = {1L, 0L, 9223372036854775807L, -9223372036854775808L},
      charArray = {'a', '\n', '\u0001', '\u0000', '\uffff', '\u0000'},
      enumArray = {MoreAnnotations.TestEnum.FirstValue, MoreAnnotations.TestEnum.SecondValue},
      annotationArray = {@MoreAnnotations.NestedAnnotation("a"), @MoreAnnotations.NestedAnnotation("b")},
      stringArray = {"first", "second", ""},
      classArray = {CharSequence.class, String.class, StringBuilder.class}
   )
   val annotatedWithArrays: String = ""

   abstract fun intValue(): int default 1

   abstract fun byteValue(): byte default 1

   abstract fun floatValue(): float default 1.0F / 0.0F

   abstract fun doubleValue(): double default 0.0 / 0.0

   abstract fun booleanValue(): boolean default true

   abstract fun shortValue(): short default 1

   abstract fun longValue(): long default 1L

   abstract fun charValue(): char default '0'

   abstract fun enumValue(): MoreAnnotations.TestEnum default MoreAnnotations.TestEnum.FirstValue

   abstract fun annotationValue(): MoreAnnotations.NestedAnnotation default @MoreAnnotations.NestedAnnotation

   abstract fun stringValue(): String default "default"

   abstract fun classValue(): Class<? extends CharSequence> default CharSequence.class

   abstract fun intArray(): int[] default {1, 0, 2147483647, -2147483648}

   abstract fun byteArray(): byte[] default {1, 0, 127, -128, -1}

   abstract fun floatArray(): float[] default {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F}

   abstract fun doubleArray(): double[] default {1.0, 0.0, 1.7976931348623157E308, 4.9E-324, 0.0 / 0.0, 1.0 / 0.0, -1.0 / 0.0}

   abstract fun booleanArray(): boolean[] default {true, false}

   abstract fun shortArray(): short[] default {1, 0, 32767, -32768, -1}

   abstract fun longArray(): long[] default {1L, 0L, 9223372036854775807L, -9223372036854775808L}

   abstract fun charArray(): char[] default {'\u0001', '\u0000', '\uffff', '\u0000'}

   abstract fun enumArray(): MoreAnnotations.TestEnum[] default {MoreAnnotations.TestEnum.FirstValue}

   abstract fun annotationArray(): MoreAnnotations.NestedAnnotation[] default {@MoreAnnotations.NestedAnnotation}

   abstract fun stringArray(): String[] default {"first", "second", ""}

   abstract fun classArray(): Class<? extends CharSequence>[] default {CharSequence.class, String.class, StringBuilder.class}

   abstract inner annotation class NestedAnnotation {
      abstract fun value(): String default "MyString"
   }

   inner enum TestEnum {
      val FirstValue,
      val SecondValue;
   }
}

