package pkg

abstract class TestAnonymousClass {
   val R3: Runnable = new Runnable() {
      override open fun run() {
         int a = 5;// 28
         int b = 5;// 29
      }// 30
   }
   val R: Runnable = new Runnable() {
      override open fun run() {
         int a = 5;// 45
         int b = 5;// 46
      }// 47
   }
   val R1: Runnable = new Runnable() {
      override open fun run() {
         int a = 5;// 53
         int b = 5;// 54
      }// 55
   }
   private val y: TestAnonymousClass.InnerRecursive = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
      override open fun foo() {
         int a = 5;// 75
         int b = 5;// 76
         int g = 5;// 77
      }// 78
   }) {
      var v: int = 5
      var t: int = 5
      var j: int = 5
      var o: int = 5
   }
   private val x: TestAnonymousClass.InnerRecursive = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
      override open fun foo() {
         int a = 5;// 90
         int b = 5;// 91
         int g = 5;// 92
      }// 93
   }) {
      var v: int = 5
      var t: int = 5
      var j: int = 5
      var o: int = 5
   }

   open fun foo(i: int) {
      if (i > 0) {// 10
         TestAnonymousClass.I r = new TestAnonymousClass.I() {// 11
            override open fun foo() {
               int a = 5;// 13
               int b = 5;// 14
            }// 15
         };
         r.foo();// 17
      } else {
         int x = 5;// 20
         System.out.println(5);// 21
      }

   }// 23

   open fun boo() {
      int a = 5;// 35
   }// 36

   open fun zoo() {
      int a = 5;// 39
   }// 40

   abstract inner interface I {
      abstract fun foo()
   }

   private inner class Inner {
      private var R_I: Runnable = new Runnable() {
         override open fun run() {
            int a = 5;// 66
            int b = 5;// 67
         }// 68
      }
   }

   inner open class InnerRecursive {
      var r: TestAnonymousClass.InnerRecursive = null

      open constructor(r: TestAnonymousClass.InnerRecursive) {
         this.r = r;// 105
      }// 106

      open fun foo() {
      }// 110
   }
}

class 'pkg/TestAnonymousClass$2' {
   method 'run ()V' {
      0      5
      1      5
      2      6
      3      6
      4      7
   }
}

class 'pkg/TestAnonymousClass$3' {
   method 'run ()V' {
      0      11
      1      11
      2      12
      3      12
      4      13
   }
}

class 'pkg/TestAnonymousClass$4' {
   method 'run ()V' {
      0      17
      1      17
      2      18
      3      18
      4      19
   }
}

class 'pkg/TestAnonymousClass$5' {
   method 'foo ()V' {
      0      23
      1      23
      2      24
      3      24
      4      25
      5      25
      6      26
   }
}

class 'pkg/TestAnonymousClass$7' {
   method 'foo ()V' {
      0      35
      1      35
      2      36
      3      36
      4      37
      5      37
      6      38
   }
}

class 'pkg/TestAnonymousClass$1' {
   method 'foo ()V' {
      0      50
      1      50
      2      51
      3      51
      4      52
   }
}

class 'pkg/TestAnonymousClass' {
   method 'foo (I)V' {
      0      47
      1      47
      c      48
      d      54
      e      54
      f      54
      10      54
      11      54
      12      54
      16      56
      17      56
      18      57
      19      57
      1a      57
      1b      57
      1c      57
      1f      60
   }

   method 'boo ()V' {
      0      63
      1      63
      2      64
   }

   method 'zoo ()V' {
      0      67
      1      67
      2      68
   }
}

class 'pkg/TestAnonymousClass$Inner$1' {
   method 'run ()V' {
      0      77
      1      77
      2      78
      3      78
      4      79
   }
}

class 'pkg/TestAnonymousClass$InnerRecursive' {
   method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
      4      87
      5      87
      6      87
      7      87
      8      87
      9      88
   }

   method 'foo ()V' {
      0      91
   }
}

Lines mapping:
10 <-> 48
11 <-> 49
13 <-> 51
14 <-> 52
15 <-> 53
17 <-> 55
20 <-> 57
21 <-> 58
23 <-> 61
28 <-> 6
29 <-> 7
30 <-> 8
35 <-> 64
36 <-> 65
39 <-> 68
40 <-> 69
45 <-> 12
46 <-> 13
47 <-> 14
53 <-> 18
54 <-> 19
55 <-> 20
66 <-> 78
67 <-> 79
68 <-> 80
75 <-> 24
76 <-> 25
77 <-> 26
78 <-> 27
90 <-> 36
91 <-> 37
92 <-> 38
93 <-> 39
105 <-> 88
106 <-> 89
110 <-> 92
Not mapped:
18
104
